{
  "type": "Program",
  "start": 0,
  "end": 207,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 0,
      "end": 154,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 4,
          "end": 153,
          "id": {
            "type": "Identifier",
            "start": 4,
            "end": 5,
            "name": "c"
          },
          "init": {
            "type": "FunctionExpression",
            "start": 8,
            "end": 153,
            "id": null,
            "expression": false,
            "generator": false,
            "async": false,
            "params": [
              {
                "type": "Identifier",
                "start": 18,
                "end": 19,
                "name": "x"
              }
            ],
            "body": {
              "type": "BlockStatement",
              "start": 22,
              "end": 153,
              "body": [
                {
                  "type": "ReturnStatement",
                  "start": 26,
                  "end": 151,
                  "argument": {
                    "type": "FunctionExpression",
                    "start": 33,
                    "end": 151,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "start": 43,
                        "end": 44,
                        "name": "m"
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "start": 47,
                      "end": 151,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 53,
                          "end": 147,
                          "argument": {
                            "type": "ConditionalExpression",
                            "start": 60,
                            "end": 147,
                            "test": {
                              "type": "Identifier",
                              "start": 60,
                              "end": 61,
                              "name": "m"
                            },
                            "consequent": {
                              "type": "FunctionExpression",
                              "start": 64,
                              "end": 101,
                              "id": null,
                              "expression": false,
                              "generator": false,
                              "async": false,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "start": 74,
                                  "end": 75,
                                  "name": "y"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "start": 78,
                                "end": 101,
                                "body": [
                                  {
                                    "type": "ReturnStatement",
                                    "start": 86,
                                    "end": 95,
                                    "argument": {
                                      "type": "Identifier",
                                      "start": 93,
                                      "end": 94,
                                      "name": "x"
                                    }
                                  }
                                ]
                              }
                            },
                            "alternate": {
                              "type": "FunctionExpression",
                              "start": 104,
                              "end": 147,
                              "id": null,
                              "expression": false,
                              "generator": false,
                              "async": false,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "start": 114,
                                  "end": 115,
                                  "name": "y"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "start": 118,
                                "end": 147,
                                "body": [
                                  {
                                    "type": "ReturnStatement",
                                    "start": 126,
                                    "end": 141,
                                    "argument": {
                                      "type": "AssignmentExpression",
                                      "start": 134,
                                      "end": 139,
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "start": 134,
                                        "end": 135,
                                        "name": "x"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "start": 138,
                                        "end": 139,
                                        "name": "y"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      "kind": "let"
    },
    {
      "type": "VariableDeclaration",
      "start": 155,
      "end": 171,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 159,
          "end": 170,
          "id": {
            "type": "Identifier",
            "start": 159,
            "end": 160,
            "name": "o"
          },
          "init": {
            "type": "CallExpression",
            "start": 163,
            "end": 170,
            "callee": {
              "type": "Identifier",
              "start": 163,
              "end": 164,
              "name": "c"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 166,
                "end": 168,
                "value": 10,
                "raw": "10"
              }
            ],
            "optional": false
          }
        }
      ],
      "kind": "let"
    },
    {
      "type": "ExpressionStatement",
      "start": 172,
      "end": 189,
      "expression": {
        "type": "CallExpression",
        "start": 172,
        "end": 188,
        "callee": {
          "type": "CallExpression",
          "start": 172,
          "end": 182,
          "callee": {
            "type": "Identifier",
            "start": 172,
            "end": 173,
            "name": "o"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 175,
              "end": 180,
              "value": false,
              "raw": "false"
            }
          ],
          "optional": false
        },
        "arguments": [
          {
            "type": "Literal",
            "start": 184,
            "end": 186,
            "value": 15,
            "raw": "15"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 190,
      "end": 206,
      "expression": {
        "type": "CallExpression",
        "start": 190,
        "end": 205,
        "callee": {
          "type": "CallExpression",
          "start": 190,
          "end": 199,
          "callee": {
            "type": "Identifier",
            "start": 190,
            "end": 191,
            "name": "o"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 193,
              "end": 197,
              "value": true,
              "raw": "true"
            }
          ],
          "optional": false
        },
        "arguments": [
          {
            "type": "Literal",
            "start": 201,
            "end": 203,
            "value": 42,
            "raw": "42"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script"
}
